const Vault = require('node-vault');

const vaultClient = Vault({
  apiVersion: 'v1',
  endpoint: process.env.VAULT_ADDR || 'http://127.0.0.1:8200',
  token: process.env.VAULT_ROOT_TOKEN, // App token generated by bootstrap
});

const keyName = 'mcp-signing-key';

/**
 * Initialize Vault connection
 */
async function initVault() {
  console.log('🔐 Connecting to Vault...');

  try {
    const health = await vaultClient.health();
    if (!health.initialized) throw new Error('Vault not initialized');
    if (health.sealed) throw new Error('Vault is sealed. Unseal it first.');
    console.log('✅ Vault connection successful.');

    // Ensure signing key exists
    try {
      await vaultClient.read(`transit/keys/${keyName}`);
      console.log(`🔑 Signing key '${keyName}' exists.`);
    } catch {
      throw new Error(`Signing key '${keyName}' not found. Run initVault.js to bootstrap.`);
    }

    console.log('🚀 Vault ready for signing operations.');
  } catch (err) {
    console.error('❌ Vault initialization failed:', err.message);
    throw err;
  }
}

/**
 * Sign data using Vault Transit Engine
 */
async function signData(payload) {
  const result = await vaultClient.write(`transit/sign/${keyName}`, {
    input: Buffer.from(payload).toString('base64'),
    key_version: 1,
    algorithm: 'ecdsa-p256-sha256',
  });
  return result.data.signature;
}

/**
 * Get the public key for signing key
 */
async function getPublicKey() {
  const result = await vaultClient.read(`transit/keys/${keyName}`);
  return result.data.keys['1'].public_key;
}

module.exports = { vaultClient, initVault, signData, getPublicKey };